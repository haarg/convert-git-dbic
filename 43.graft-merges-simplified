#!/usr/bin/env perl

use Cwd qw(realpath);
use File::Basename;
my $BASE_DIR = dirname realpath __FILE__;
chomp (my $GIT_DIR = `git rev-parse --git-dir`);

my $simplified_merges = do "$BASE_DIR/cache/simplified-merges.pl";

{
    my @merges = `git log --merges --pretty=format:'%H %P'`;
    my %altered;
    my %merges;
    for my $merge ( reverse @merges ) {
        chomp $merge;
        my ($commit, @parents) = split / /, $merge;
        $merges{$commit} = \@parents;
        my ( $left_parent, $right_parent ) = @parents;
        # first parent is a merge
        if ( my $left_grandparents = $merges{ $left_parent } ) {
            my $right_grandparent = `git show -s --pretty='format:%P' $right_parent | cut -d' ' -f1`;
            chomp $right_grandparent;
            if ($right_grandparent eq $left_grandparents->[1]) {
                $altered{$commit}++;
                $parents[0] = $left_grandparents->[0];
                delete $merges{ $left_parent };
                delete $altered{ $left_parent };
            }
        }
    }

    open my $fh, '>>', "$GIT_DIR/info/grafts";
    print { $fh } "# Simplified merges\n";
    for my $commit ( keys %altered ) {
        print { $fh } join(q{ }, $commit, @{ $merges{$commit} }) . "\n";
    }
    close $fh;
}

{
    use Data::Dumper;
    $Data::Dumper::Indent = 1;
    $Data::Dumper::Terse = 1;
    $Data::Dumper::Sortkeys = 1;

    @altered{ keys %$simplified_merges } = values %$simplified_merges;
    open my $fh, '>', "$BASE_DIR/cache/simplified-merges.pl";
    print { $fh } Dumper(\%altered);
    close $fh;
}

